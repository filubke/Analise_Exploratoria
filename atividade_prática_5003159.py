# -*- coding: utf-8 -*-
"""Atividade_prática_5003159.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17f2AQ4WbuDRqhHq01JuqUu8mo_PGEr4v

# **Nome:Felipe Schafhauser Lubke; RU: 5003159; Curso:TECNOLOGIA EM CIÊNCIA DE DADOS**
"""

# Commented out IPython magic to ensure Python compatibility.
# instalar o pacote
# %pip install bokeh_sampledata

# Abrir o dataframe e importar as bibliotecas.
from bokeh.sampledata.iris import flowers as data
import matplotlib.pyplot as plt

# Mostra as primeiras cinco linhas do dataframe
display(data.head())

# Mostra as dimensões do dataframe (quantas linhas e colunas)
display(data.shape)

# Mostra os tipos de dados das colunas
display(data.info())

# Mostra os nomes das colunas
display(data.columns)

# Exibe um resumo das principais estatísticas do dataframe
display(data.describe())

# Exibe a frequência absoluta das espécies
display(data['species'].value_counts())

# Exibe a frequência relativa das espécies
display(data['species'].value_counts(normalize=True))

# Calcula as frequência absolutas por espécies
species_counts = data['species'].value_counts()

# Gráfico de barras verticais
plt.figure(figsize=(8, 6))
plt.bar(species_counts.index, species_counts.values)
plt.title('Total por Espécie')
plt.xlabel('Espécie')
plt.ylabel('Total')
plt.show()

# Gráfico de barras horizontais
plt.figure(figsize=(8, 6))
plt.barh(species_counts.index, species_counts.values)
plt.title('Total por Espécie')
plt.xlabel('Total')
plt.ylabel('Espécie')
plt.show()

# Exibir boxplots de todas as colunas numéricas por espécie em um único gráfico
numerical_cols = data.select_dtypes(include=['float64']).columns

fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(15, 10)) # Crie subplots 2x2
axes = axes.flatten() # Achata a matriz de eixos para iterar facilmente

for i, col in enumerate(numerical_cols):
    data.boxplot(column=col, by='species', ax=axes[i]) # Passe o eixo para o boxplot
    axes[i].set_title(f'Boxplot de {col} por Espécie') # Defina o título para cada subplot
    axes[i].set_ylabel(col)
    axes[i].set_xlabel('Espécie') # Defina o rótulo do eixo x para cada subplot

plt.suptitle('Boxplots de Características por Espécie', y=1.02) # Título geral para a figura
plt.tight_layout() # Ajusta o layout para evitar sobreposição
plt.show()

# Calcular a média por espécies
mean_by_species = data.groupby('species')[numerical_cols].mean()
print("Média por Espécies:")
display(mean_by_species)

# Calcular a mediana por espécies
median_by_species = data.groupby('species')[numerical_cols].median()
print("\nMediana por Espécies:")
display(median_by_species)

# Calcular o desvio padrão por espécies
std_by_species = data.groupby('species')[numerical_cols].std()
print("Desvio Padrão por Espécies:")
display(std_by_species)

# Calcular a variância por espécies
variance_by_species = data.groupby('species')[numerical_cols].var()
print("\nVariância por Espécies:")
display(variance_by_species)

"""**no max 5 linhas, considerando os itens 3, 4, 8, 9 e o que você observou no boxplot**

---

Vemos que a espécies tem a mesma frequência, 50 observações para cada uma, gerando uma distribuição de 0,33 para cada. Conseguimos observar que a espécie setosa tem um valor menor para todas as medidas analisadas, menos em relação a sepal width que ela tem o mai-or valor. Em relação ao box plot, conseguimos observar esse comportamento de maneira mais fácil ao olhar o posicionamento das caixas, onde a setosa sempre está posicionada mais abaixo nos gráficos, menos em relação a sepal width que ela se posiciona mais a cima.
"""